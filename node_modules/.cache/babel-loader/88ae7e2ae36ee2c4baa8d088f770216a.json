{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jakob/aloneStudy/refactoring-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\nfunction statement(invoice, plays) {\n  var totalAmount = 0;\n  var volumeCredits = 0;\n  var result = \"\\uCCAD\\uAD6C \\uB0B4\\uC5ED (\\uACE0\\uAC1D\\uBA85: \".concat(invoice.customer, \")\\n\");\n  var format = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2\n  }).format; // 임시 변수를 질의 함수로 바꾸기\n\n  function playFor(aPerformance) {\n    return plays[aPerformance.playID];\n  } // 함수 추출하기\n\n\n  function amountFor(aPerformance) {\n    // 값이 바뀌지 않는 변수는 매개변수로 전달\n    var result = 0;\n\n    switch (playFor(aPerformance).type) {\n      case \"tragedy\":\n        result = 40000;\n\n        if (aPerformance.audience > 30) {\n          result += 1000 * (aPerformance.audience - 30);\n        }\n\n        break;\n\n      case \"comedy\":\n        result = 30000;\n\n        if (aPerformance.audience > 20) {\n          result += 10000 + 500 * (aPerformance.audience - 20);\n        }\n\n        result += 300 * aPerformance.audience;\n        break;\n\n      default:\n        throw new Error(\"\\uC54C \\uC218 \\uC5C6\\uB294 \\uC7A5\\uB974: \".concat(playFor(aPerformance).type));\n    }\n\n    return result; // 함수 안에서 값이 바뀌는 변수 반환\n  }\n\n  var _iterator = _createForOfIteratorHelper(invoice.performances),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var perf = _step.value;\n      var thisAmount = amountFor(perf, playFor(perf)); // 변수 인라인하기\n      // 포인트를 적립한다.\n\n      volumeCredits += Math.max(perf.audience - 30, 0); // 희극 관객 5명마다 추가 포인트를 제공한다.\n\n      if (\"comedy\" === playFor(perf).type) {\n        volumeCredits += Math.floor(perf.audience / 5);\n      } // 청구 내역을 출력한다.\n\n\n      result += \" \".concat(playFor(perf).name, \": \").concat(format(thisAmount / 100), \" (\").concat(perf.audience, \"\\uC11D)\\n\");\n      totalAmount += thisAmount;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  result += \" \\uCD1D\\uC561: \".concat(totalAmount / 100, \"\\n\");\n  result += \" \\uC801\\uB9BD \\uD3EC\\uC778\\uD2B8: \".concat(volumeCredits, \"\\uC810\\n\");\n  return result;\n}\n\nexport { statement };","map":{"version":3,"sources":["/Users/jakob/aloneStudy/refactoring-test/src/statement.js"],"names":["statement","invoice","plays","totalAmount","volumeCredits","result","customer","format","Intl","NumberFormat","style","currency","minimumFractionDigits","playFor","aPerformance","playID","amountFor","type","audience","Error","performances","perf","thisAmount","Math","max","floor","name"],"mappings":";;AAAA,SAASA,SAAT,CAAmBC,OAAnB,EAA4BC,KAA5B,EAAmC;AACjC,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,MAAM,4DAAkBJ,OAAO,CAACK,QAA1B,QAAV;AACA,MAAMC,MAAM,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAC5CC,IAAAA,KAAK,EAAE,UADqC;AAE5CC,IAAAA,QAAQ,EAAE,KAFkC;AAG5CC,IAAAA,qBAAqB,EAAE;AAHqB,GAA/B,EAIZL,MAJH,CAJiC,CAUjC;;AACA,WAASM,OAAT,CAAiBC,YAAjB,EAA+B;AAC7B,WAAOZ,KAAK,CAACY,YAAY,CAACC,MAAd,CAAZ;AACD,GAbgC,CAejC;;;AACA,WAASC,SAAT,CAAmBF,YAAnB,EAAiC;AAC/B;AACA,QAAIT,MAAM,GAAG,CAAb;;AAEA,YAAQQ,OAAO,CAACC,YAAD,CAAP,CAAsBG,IAA9B;AACE,WAAK,SAAL;AACEZ,QAAAA,MAAM,GAAG,KAAT;;AACA,YAAIS,YAAY,CAACI,QAAb,GAAwB,EAA5B,EAAgC;AAC9Bb,UAAAA,MAAM,IAAI,QAAQS,YAAY,CAACI,QAAb,GAAwB,EAAhC,CAAV;AACD;;AACD;;AACF,WAAK,QAAL;AACEb,QAAAA,MAAM,GAAG,KAAT;;AACA,YAAIS,YAAY,CAACI,QAAb,GAAwB,EAA5B,EAAgC;AAC9Bb,UAAAA,MAAM,IAAI,QAAQ,OAAOS,YAAY,CAACI,QAAb,GAAwB,EAA/B,CAAlB;AACD;;AACDb,QAAAA,MAAM,IAAI,MAAMS,YAAY,CAACI,QAA7B;AACA;;AACF;AACE,cAAM,IAAIC,KAAJ,oDAAwBN,OAAO,CAACC,YAAD,CAAP,CAAsBG,IAA9C,EAAN;AAfJ;;AAiBA,WAAOZ,MAAP,CArB+B,CAqBhB;AAChB;;AAtCgC,6CAwChBJ,OAAO,CAACmB,YAxCQ;AAAA;;AAAA;AAwCjC,wDAAuC;AAAA,UAA9BC,IAA8B;AACrC,UAAIC,UAAU,GAAGN,SAAS,CAACK,IAAD,EAAOR,OAAO,CAACQ,IAAD,CAAd,CAA1B,CADqC,CACY;AAEjD;;AACAjB,MAAAA,aAAa,IAAImB,IAAI,CAACC,GAAL,CAASH,IAAI,CAACH,QAAL,GAAgB,EAAzB,EAA6B,CAA7B,CAAjB,CAJqC,CAKrC;;AACA,UAAI,aAAaL,OAAO,CAACQ,IAAD,CAAP,CAAcJ,IAA/B,EAAqC;AACnCb,QAAAA,aAAa,IAAImB,IAAI,CAACE,KAAL,CAAWJ,IAAI,CAACH,QAAL,GAAgB,CAA3B,CAAjB;AACD,OARoC,CAUrC;;;AACAb,MAAAA,MAAM,eAAQQ,OAAO,CAACQ,IAAD,CAAP,CAAcK,IAAtB,eAA+BnB,MAAM,CAACe,UAAU,GAAG,GAAd,CAArC,eACJD,IAAI,CAACH,QADD,cAAN;AAGAf,MAAAA,WAAW,IAAImB,UAAf;AACD;AAvDgC;AAAA;AAAA;AAAA;AAAA;;AAwDjCjB,EAAAA,MAAM,6BAAYF,WAAW,GAAG,GAA1B,OAAN;AACAE,EAAAA,MAAM,gDAAgBD,aAAhB,aAAN;AACA,SAAOC,MAAP;AACD;;AAED,SAASL,SAAT","sourcesContent":["function statement(invoice, plays) {\r\n  let totalAmount = 0;\r\n  let volumeCredits = 0;\r\n  let result = `청구 내역 (고객명: ${invoice.customer})\\n`;\r\n  const format = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n    minimumFractionDigits: 2\r\n  }).format;\r\n\r\n  // 임시 변수를 질의 함수로 바꾸기\r\n  function playFor(aPerformance) {\r\n    return plays[aPerformance.playID];\r\n  }\r\n\r\n  // 함수 추출하기\r\n  function amountFor(aPerformance) {\r\n    // 값이 바뀌지 않는 변수는 매개변수로 전달\r\n    let result = 0;\r\n\r\n    switch (playFor(aPerformance).type) {\r\n      case \"tragedy\":\r\n        result = 40000;\r\n        if (aPerformance.audience > 30) {\r\n          result += 1000 * (aPerformance.audience - 30);\r\n        }\r\n        break;\r\n      case \"comedy\":\r\n        result = 30000;\r\n        if (aPerformance.audience > 20) {\r\n          result += 10000 + 500 * (aPerformance.audience - 20);\r\n        }\r\n        result += 300 * aPerformance.audience;\r\n        break;\r\n      default:\r\n        throw new Error(`알 수 없는 장르: ${playFor(aPerformance).type}`);\r\n    }\r\n    return result; // 함수 안에서 값이 바뀌는 변수 반환\r\n  }\r\n\r\n  for (let perf of invoice.performances) {\r\n    let thisAmount = amountFor(perf, playFor(perf)); // 변수 인라인하기\r\n\r\n    // 포인트를 적립한다.\r\n    volumeCredits += Math.max(perf.audience - 30, 0);\r\n    // 희극 관객 5명마다 추가 포인트를 제공한다.\r\n    if (\"comedy\" === playFor(perf).type) {\r\n      volumeCredits += Math.floor(perf.audience / 5);\r\n    }\r\n\r\n    // 청구 내역을 출력한다.\r\n    result += ` ${playFor(perf).name}: ${format(thisAmount / 100)} (${\r\n      perf.audience\r\n    }석)\\n`;\r\n    totalAmount += thisAmount;\r\n  }\r\n  result += ` 총액: ${totalAmount / 100}\\n`;\r\n  result += ` 적립 포인트: ${volumeCredits}점\\n`;\r\n  return result;\r\n}\r\n\r\nexport { statement };\r\n"]},"metadata":{},"sourceType":"module"}